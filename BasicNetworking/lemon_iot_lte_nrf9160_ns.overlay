// To get started, press Ctrl+Space to bring up the completion menu and view the available nodes.

// You can also use the buttons in the sidebar to perform actions on nodes.
// Actions currently available include:

// * Enabling / disabling the node
// * Adding the bus to a bus
// * Removing the node
// * Connecting ADC channels

// For more help, browse the DeviceTree documentation at https://docs.zephyrproject.org/latest/guides/dts/index.html
// You can also visit the nRF DeviceTree extension documentation at https://nrfconnect.github.io/vscode-nrf-connect/devicetree/nrfdevicetree.html

/ {
	chosen {
		zephyr,display = &st7789v;
	};

	pwmleds {
		compatible = "pwm-leds";
		lcd_led1: lcd_led_1 {
			pwms = <&pwm1 0 PWM_MSEC(20) PWM_POLARITY_NORMAL>;
		};
	};

    aliases {
		lcd-led1 = &lcd_led1;
	};
};

&spi2 {
	compatible = "nordic,nrf-spim";
	status = "okay";
	cs-gpios = <&gpio0 24 GPIO_ACTIVE_LOW>;  /* D6 SD */

	pinctrl-0 = <&spi2_default>;
	pinctrl-1 = <&spi2_sleep>;
	pinctrl-names = "default", "sleep";


    st7789v: st7789v@0 {
		compatible = "sitronix,st7789v";
		label = "ST7789V";
		spi-max-frequency = <24000000>;
		reg = <0>;
		cmd-data-gpios = <&gpio0 7 GPIO_ACTIVE_LOW>;	/* D9 */
		reset-gpios = <&gpio0 9 GPIO_ACTIVE_LOW>;	/* D10 */
		width = <170>; // 170 for 90 degree, 320 for 0 degree
		height = <320>; // 320 for 90 degree, 170 for 0 degree
		x-offset = <35>; // 35 for 90 degree, 0 for 0 degree
		y-offset = <0>; // 0 for 90 degree, 35 for 0 degree
		vcom = <0x2b>;
		gctrl = <0x35>;
		vrhs = <0x0f>;
		vdvs = <0x20>;
		mdac = <0xC0>; // 0x00 for 90 degree, 0x60 for 0 degree
		gamma = <0x01>;
		colmod = <0x55>;
		lcm = <0x2c>;
		porch-param = [0c 0c 00 33 33];
		cmd2en-param = [5a 69 02 01];
		pwctrl1-param = [52 a1];
		pvgam-param = [D0 00 02 07 0B 1A 31 54 40 29 12 12 12 17];
		nvgam-param = [D0 00 02 07 05 15 2D 44 44 1C 18 16 1C 1D];
		ram-param = [00 F8];
		rgb-param = [CD 08 14];
	};
};

&pwm1 {
	status = "okay";
	pinctrl-0 = <&pwm1_default>;
	pinctrl-1 = <&pwm1_sleep>;
	pinctrl-names = "default", "sleep";
};

&pinctrl {   

	pwm1_default: pwm1_default {
		group1 {
			psels = <NRF_PSEL(PWM_OUT0, 0, 15)>;
		};
	};

	pwm1_sleep: pwm1_sleep {
		group1 {
			psels = <NRF_PSEL(PWM_OUT0, 0, 15)>;
		};
	};

	spi2_default: spi2_default {
		group1 {
			psels = <NRF_PSEL(SPIM_SCK, 0, 20)>,
				<NRF_PSEL(SPIM_MOSI, 0, 21)>,
				<NRF_PSEL(SPIM_MISO, 0, 22)>;
		};
	};

	spi2_sleep: spi2_sleep {
		group1 {
			psels = <NRF_PSEL(SPIM_SCK, 0, 20)>,
				<NRF_PSEL(SPIM_MOSI, 0, 21)>,
				<NRF_PSEL(SPIM_MISO, 0, 22)>;
			low-power-enable;
		};
	};
};